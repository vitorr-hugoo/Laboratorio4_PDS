# -*- coding: utf-8 -*-
"""lab4_PDS_pt1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-Lk8ljw4bigQv5Ao_sDD8Akcew5Md8B7
"""

import board
import time
import busio
import adafruit_ads1x15.ads1115 as ADS
from adafruit_ads1x15.analog_in import AnalogIn
import matplotlib.pyplot as plt

# Inicializa a interface I2C
i2c = busio.I2C(board.SCL, board.SDA)
# Cria um objeto ADS1115
ads = ADS.ADS1115(i2c)
class CircularBuffer:
    def init(self, size):
        self.size = size
        self.buffer = [None] * size
        self.head = 0
        self.tail = 0

    def is_empty(self):
        return self.head == self.tail and self.buffer[self.head] is None

    def is_full(self):
        return self.head == self.tail and self.buffer[self.head] is not None

    def enqueue(self, item):
        if self.is_full():
            # Se o buffer estiver cheio, movemos a posição de leitura (tail)
            self.tail = (self.tail + 1) % self.size

        self.buffer[self.head] = item
        self.head = (self.head + 1) % self.size

    def dequeue(self):
        if self.is_empty():
            return None

        item = self.buffer[self.tail]
        self.buffer[self.tail] = None
        self.tail = (self.tail + 1) % self.size
        return item

    def get_buffer(self):
        return self.buffer

buffer_size = 128
buffer = CircularBuffer(buffer_size)
flag=0;
try:
    while flag<128:
        valor = AnalogIn(ads, ADS.P0)
        buffer.enqueue(valor)  # Adiciona elementos ao buffer
        flag+=1

except KeyboardInterrupt:
    print("\nPrograma encerrado")

print("Valores no buffer:")
for item in buffer.get_buffer():
    print("Valor analógico:", item.value, "Tensão:", item.voltage)

# Cria um gráfico para todos os valores do buffer
plt.plot([item.voltage for item in buffer.get_buffer()], marker='o')
plt.xlabel('Índices')
plt.ylabel('Tensão')
plt.title('Gráfico de Tensão ao Longo do Tempo')
plt.show()